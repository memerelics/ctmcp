%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                  7. オブジェクト指向プログラミング
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

他書で十分に説明されていない領域，つまり
  * 他の計算モデルとの関係
  * オブジェクト指向の正確な意味
  * 動的型付けの可能性
について紹介する．


%%% オブジェクト指向プログラミングの原則

* 第六章の状態ありモデルを基底にする
* プログラムは相互作用するデータ抽象の集まりである
  1. データ抽象はデフォルトで「状態あり」であるべき
  2. PDAスタイル(p.431)のデータ抽象がデフォルトであるべき．多態性と継承がやりやすいので.

> 継承により，抽象を漸増的に構築できる．継承を支援するために，クラスという言語抽象を追加する．

さらに情報を得るには Bertrand Meyer "Object-Oriented Software Construction" がオススメ.
継承に関する詳細な議論がおもしろいとのこと
翻訳されたものがよく見るコレだった

オブジェクト指向入門 第2版 原則・コンセプト (IT Architect’Archive クラシックモダン・コンピューティング)
バートランド・メイヤー, 酒匂 寛
http://www.amazon.co.jp/dp/4798111112


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7.1. 継承
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

継承という概念を導入してコード重複を減らし，データ抽象の間の関係を明らかにする．
データ抽象の漸増的定義をクラス(class)という

> 継承は大いなる可能性ではあるが，経験によれば，大いに注意して使わなければならない．
* 祖先クラスについて十分知った上で変形を定義しないといけない
  * クラスの不変表明を破ってしまうことがある
* 継承を使うとあるコンポーネントに対して新しいインターフェイスが追加されることになり，
  そのコンポーネントが生きている間インターフェイスを維持しなければならない
* ある抽象の実装がプログラムのいたるところにばら撒かれることになる
  * 祖先クラスも読まないと実装が理解できない

継承の代用として「コンポーネントベースプログラミング」が考えられる．
不変表明を破ることなく直接コンポーネントを使い，合成できる．


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7.5. 他の計算モデルとの関係
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 7.5.1. オブジェクトベースプログラミングとコンポーネントベースプログラミング
% オブジェクトベースプログラミングとは継承抜きのOOP．
% 継承がないためオブジェクト抽象が単純になり，オーバーライド，多重継承の問題もなくなる．
% 静的束縛と動的束縛が等しくなる．


%% 7.5.2. 高階プログラミング
% 高階プログラミングもオブジェクト指向もやろうとすることは同じ．
% OOPは高階プログラミングを装飾している(embellish)点が異なる．たとえば
%   * 明示的状態が定義でき，簡単に使える
%   * 同じ明示的状態を共有するメソッド定義が容易
%   * メソッドの集合を定義・具体化する仕組みとして"クラス"が用意されている
%   * 継承がある．既存のメソッド集合からメソッドを拡張・修正・組み合わせる
%   * クラスとオブジェクトの間にいろんなレベルのカプセル化が定義できる

% 高階プログラミングとOOPに共通する限界
%   * 値としてのクラス
%   * 完全字句的スコープ
%   * 第一級メッセージ
%   * 手続きはオブジェクトとしてコード化できる
%   * 汎用手続きは抽象クラスとしてコード化できる


%% 7.5.3. 関数分解と型分解


%% 7.5.4. すべてをオブジェクトにすべきか?
% 強いオブジェクト
% オブジェクトとプログラムの複雑さ
% 一様オブジェクト構文



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7.6. オブジェクトシステムを実装すること
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 主な特性は高階プログラミングと明示的状態の組み合わせによって得られる


%% 7.6.1. 抽象図


%% 7.6.2. クラスを実装すること

% fig7.26
declare
class Counter
   attr val
   meth init(Value)
      val:=Value
   end
   meth inc(Value)
      val:=@val+Value
   end
   meth browse
      {Browse @val}
   end
end


% fig7.27
declare Counter
local
   Attrs = [val]
   MethodTable = m(browse:MyBrowse init:Init inc:Inc)
   proc {Init M S Self}
      init(Value)=M
   in
      (S.val):=Value
   end
   proc {Inc M S Self}
      X
      inc(Value)=M
   in
      X=@(S.val) (S.val):=X+Value
   end
   proc {MyBrowse M S Self}
      browse=M
      {Browse @(S.val)}
   end
in
   Counter = {Wrap c(methods:MethodTable attrs:Attrs)}
end

% クラスはひとつの値(具体的にはレコード)である. Wrap のお陰で覗き見られないようになってる
% クラスのレコードは以下のものを含む
%   * メソッド表にあるメソッドの集合
%   * 属性名の集合


%% 7.6.3. オブジェクトの実装

% fig7.28
declare
fun {New WClass InitialMethod}
   State Obj Class={Unwrap WClass}
in
   State={MakeRecord s Class.attrs}
   {Record.forAll State proc {$ A} {NewCell _ A} end}
   proc {Obj M}
      {Class.methods.{Label M} M State Obj}
   end
   {Obj InitialMethod}
   Obj
end

% 動作確認
declare
C={New Counter init(0)} % 過去出てきたクラス
{C inc(6)} {C inc(6)}
{C browse}


%% 7.6.4. 継承の実装

% fig7.29
declare
fun {From C1 C2 C3}
   c(methods:M1 attrs:A1)={Unwrap C1}
   c(methods:M2 attrs:A2)={Unwrap C2}
   c(methods:M3 attrs:A3)={Unwrap C3}
   MA1={Arity M1}
   MA2={Arity M2}
   MA3={Arity M3}
   ConfMeth={Minus {Inter MA2 MA3} MA1}
   ConfAttr={Minus {Inter A1 A2} A3}
in
   if ConfMeth\=nil then
      raise illegalInheritance(methConf:ConfMeth) end
   end
   if ConfAttr\=nil then
      raise illegalInheritance(attrConf:ConfAttr) end
   end
   {Wrap c(methods:{Adjoin {Adjoin M2 M3} M1}
           attrs:{Union {Union A2 A3} A1})}
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7.7. Java言語
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ;; 適当に読み流す
