%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2.3 核言語
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Wei      : 変数. 束縛/未束縛の状態がある
%% wei      : アトムatom. いきなり使える.
%% wei(...) : レコードrecord. いきなり使える.

%% データ構造は階層的に定義される.
%% [一般] record > tuple > list [特殊]

%% person(a:hoge b:fuga) ... レコードrecordは, ozの基本データ構造
%% person(a b c) ... タプルtupleは, レコードの特殊ケース.
%% [a b c] ... リストlistは, タプルの特殊ケース

%% person(a b c) == person(1:a 2:b 3:c)
%% [a b c] = '|'(a b c nil) = '|'(1:a 2:b 3:c 4:nil)

%% レコード名(= ラベル)は, (大文字や予約語じゃなければ)何でも良い. おもむろに書くとレコードになる.
%% '#'もレコード名. 以下の例は(暗黙のindexが省略されて)単にタプルを作っているだけ.
{Browse '#'(a b c)} %% => a#b#c
{Browse '#'(1:a 2:b 3:c)} %% => a#b#c
{Browse '#'(x:a y:b z:c)} %% => '#'(x:a y:b z:c)

%% '#'もレコード名には変わりないが, 特別に中間記法が許されており, さらにBrowse上でも中間記法の形で描画される.
%% さっきから表示している "=> a#b#c" がそれ.
{Browse a#b#c} %% => a#b#c


%% '|'も基本的には"person"などと同じ「レコード名」に過ぎない.
{Browse '|'(name:a age:b)}    % => '|'(age:b name:a)
{Browse person(name:a age:b)} % => person(age:b name:a)

%% '|'が与えられている特別な役割は, タプルのさらに特殊なケース"リスト"を表現できるというもの.
{Browse '|'(1:a 2:b)} % => a|b
{Browse person(1:a 2:b)} 
%% こう書くとただのレコード名であることがはっきりする
{Browse '|'(x:"asdf" y:"fdas")}

%% リストの文脈において'|'は特別な働きをする. というかcons. 右結合の演算子.
%% nilで終わるリスト(完全リスト)になるため[...]の形で書ける.
{Browse a|b|c}                  % => a|b|c
{Browse a|b|c|nil}              % => [a b c]
{Browse '|'(1:a 2:b 3:c 4:nil)} % => '|'(a b c nil) ... 上と同義のはずだけど[...]で表現されないな

%% リストはBrowse上で表現されるような[...]の形のリテラルで直接定義できる.
{Browse [a b c]} %% => [a b c]


%% リスト, タプルと特別なラベルについて, 付録Bに詳しい説明があったのでそちら参照